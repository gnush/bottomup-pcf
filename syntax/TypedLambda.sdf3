module TypedLambda

imports
	
	Common

context-free start-symbols
  
  Module

lexical syntax
   "False" -> ID {reject}
   "True" -> ID {reject}
   "and" -> ID {reject}
   "module" -> ID {reject}
   "Bool" -> ID {reject}
   "Num"  -> ID {reject}
   "if"  -> ID {reject}
   "then"  -> ID {reject}
   "else"  -> ID {reject}
   
templates
  
  Module.Module = [module [ID] [Expr*; separator="\n,\n"]]
  Expr.Var     = [[ID]]
  Expr.App     = [[Expr] [Expr]] {left}
  Expr.Abs     = [\\[ID] : [Type]. [Expr]]
  Expr.True    = [True]
  Expr.False   = [False]
  Expr.Not     = [~[Expr]]
  Expr.And     = [[Expr] and [Expr]] {left}
  Expr.Num     = [[INT]]
  Expr.Add     = [[Expr] + [Expr]] {left}
  Expr.Cond    = [if [Expr] then [Expr] else [Expr]]
  Expr.Gt      = [[Expr] > [Expr]]  
  Expr = [([Expr])] {bracket}
  
  Type.Bool     = [Bool]
  Type.TNum     = [Num]
  Type.Function = [[Type] -> [Type]]
  
context-free priorities

  {
  	Expr.Var
  } > {
  	Expr.Not
  } > {
  	Expr.And
  	Expr.Add
  } > {
  	Expr.App
  } > {
  	Expr.Abs
  } > {
  	Expr.Cond
  }