module normalization

imports
	
	include/TypedLambda
	semantic/substitution
	trans/util

rules
	reduce: Not(True()) -> False()
	reduce: Not(False()) -> True()
	reduce: Not(e) -> Not(<reduce> e)
	
	reduce: And(lhs, True()) -> lhs
	reduce: And(_, False()) -> False()
	reduce: And(e1, e2) -> And(e1, <reduce> e2)
	
	reduce: Add(Num(n), Num(m)) -> Num(<addS> (n, m)) // why are these strings?
	reduce: Add(e1, e2) -> Add(<reduce> e1, e2)
    reduce: Add(e1, e2) -> Add(e1, <reduce> e2)
    
	reduce: Cond(True(), then, _) -> then
	reduce: Cond(False(), _, else) -> else
	reduce: Cond(cond, then, else) -> Cond(<reduce> cond, then, else)
	
	reduce: Gt(Num(n), Num(m)) -> <if <gtS> (n, m) then !True() else !False() end>
	reduce: Gt(e1, e2) -> Gt(<reduce> e1, e2)
	reduce: Gt(e1, e2) -> Gt(e1, <reduce> e2)
	
	reduce: Let(x, t, e, e') -> App(Abs(x, t, e'), e)
	
	reduce: App(Abs(x, t, e), e') -> <subst> (x, e, e')
	reduce: App(e1, e2) -> App(<reduce> e1, e2)
	
	reduce: Fix(x, t, Abs(y, t', e')) -> Abs(y, t', <subst> (x, e', Fix(x, t, Abs(y, t', e'))))
	reduce: Fix(x, t, e) -> Fix(x, t, <reduce> e)

	normalize: Module(x, e*) -> Module(x, e'*)
		with e'* := <map(normalize)> e*
	normalize = reduce; normalize
	normalize = not(reduce)